generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

// model blogs {
//   id           Int         @id @default(autoincrement())
//   slug         String      @db.VarChar(255)
//   title        String      @db.VarChar(255)
//   body         String      @db.MediumText
//   language     String      @db.VarChar(5)
//   user_id      Int
//   category_id  Int?
//   created_at   DateTime    @default(now()) @db.Timestamp(0)
//   published_at DateTime?   @db.Timestamp(0)
//   updated_at   DateTime    @default(now()) @db.Timestamp(0)
//   categories   categories? @relation(fields: [category_id], references: [id], onUpdate: Restrict, map: "blogs_ibfk_2")
//   users        users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "blogs_ibfk_1")
//   comments     comments[]

//   @@index([category_id], map: "category_id")
//   @@index([user_id], map: "user_id")
// }

// model categories {
//   id    Int     @id @default(autoincrement())
//   name  String  @db.VarChar(255)
//   blogs blogs[]
// }

// model comments {
//   id           Int       @id @default(autoincrement())
//   ip           String    @db.VarChar(255)
//   name         String    @db.VarChar(255)
//   email        String    @db.VarChar(255)
//   body         String    @db.Text
//   blog_id      Int
//   submitted_at DateTime  @default(now()) @db.Timestamp(0)
//   approved_at  DateTime? @db.Timestamp(0)
//   declined_at  DateTime? @db.Timestamp(0)
//   blogs        blogs     @relation(fields: [blog_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comments_ibfk_1")

//   @@index([blog_id], map: "blog_id")
// }

model files {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(255)
  data         Bytes    @db.MediumBlob
  content_type String   @db.VarChar(255)
  timestamp    DateTime @default(now()) @db.Timestamp(0)
  user_id      Int
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "files_ibfk_1")

  @@index([user_id], map: "user_id")
}

model projects {
  id        Int      @id @default(autoincrement())
  slug      String   @db.VarChar(255)
  name      String   @db.VarChar(255)
  content   String   @db.MediumText
  image_url String   @db.VarChar(255)
  timestamp DateTime @default(now()) @db.Timestamp(0)
}

model sent_emails {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255)
  timestamp DateTime @default(now()) @db.Timestamp(0)
}

model social_links {
  id    Int     @id @default(autoincrement())
  icon  String? @db.VarChar(255)
  label String  @db.VarChar(255)
  url   String  @db.Text
}

model users {
  id       Int     @id @default(autoincrement())
  email    String  @db.VarChar(255)
  password String  @db.Text
  username String  @db.VarChar(255)
  name     String  @db.VarChar(255)
  // blogs    blogs[]
  files    files[]

  @@unique([email, username], map: "email")
}

model website_config {
  id    Int     @id @default(autoincrement())
  name  String  @db.Text
  value String? @db.Text
}
